#include<iostream>
#include<vector>
#include <bit>
#include <bitset>
#include <cstdint>
#ifdef __GNUC__
# define __rdtsc __builtin_ia32_rdtsc
#else
# include<intrin.h>
#endif
using namespace std;
typedef unsigned long long U64;
U64 read_u64_hex(const char* data)
{
	U64 ret = 0;
	for (;;++data)//read left- to- right
	{
		unsigned char dec = *data - '0';
		//byte>>>unsigned char
		if (dec < 10)
			ret = ret << 4 | dec;
		else {
			unsigned char upper = (*data & 0xDF) - 'A';
			if (upper > 5)
				break;
			ret = ret << 4 | upper + 10;
		}
	}
	return ret;
}
U64 perm(char per[], U64 in, int opsz, int insz)
{
	U64 out = 0;
	for (int i = 0;i < opsz;++i)
	{
		out |= (in >> (insz - per[opsz - 1 - i]) & 1) << i;
	}
	return out;
}
//uint32_t leftshift(uint32_t N, unsigned int S)
//{
//	return (N >> (32 - S)) | (N << S);
//	//return ((N >> (~S)) >> 1) | (N << S);
//	//return (x << d) | (x >> (32 - d));
//}
uint32_t  leftshift(uint32_t value) {
	uint32_t overflow_mask = 0x08000000;
	uint32_t value_mask = 0x07FFFFFF;
	return ((value & value_mask) << 1) | ((value & overflow_mask) >> 27);
}

//std::uint32_t rotl(std::uint32_t v, std::int32_t shift) {
//	std::int32_t s = shift >= 0 ? shift % 32 : -((-shift) % 32);
//	return (v << s) | (v >> (32 - s));
//}
U64 encrypt(U64 x, vector<U64>rndky)
{
	char per_1[64] = { 58, 50, 42, 34, 26, 18, 10, 2,
				  60, 52, 44, 36, 28, 20, 12, 4,
				  62, 54, 46, 38, 30, 22, 14, 6,
				  64, 56, 48, 40, 32, 24, 16, 8,
				  57, 49, 41, 33, 25, 17, 9, 1,
				  59, 51, 43, 35, 27, 19, 11, 3,
				  61, 53, 45, 37, 29, 21, 13, 5,
				  63, 55, 47, 39, 31, 23, 15, 7 };
	char exp_per[48] = { 32, 1, 2, 3, 4, 5, 4, 5,
				 6, 7, 8, 9, 8, 9, 10, 11,
				 12, 13, 12, 13, 14, 15, 16, 17,
				 16, 17, 18, 19, 20, 21, 20, 21,
				 22, 23, 24, 25, 24, 25, 26, 27,
				 28, 29, 28, 29, 30, 31, 32, 1 };
	char perfn[32] = { 16, 7, 20, 21,
					29, 12, 28, 17,
					1, 15, 23, 26,
					5, 18, 31, 10,
					2, 8, 24, 14,
					32, 27, 3, 9,
					19, 13, 30, 6,
					22, 11, 4, 25 };
	char s[512] = { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
					0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
					4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
					15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 ,
				   15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
					3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
					0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
					13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 ,
				   10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
					13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
					13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
					1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 ,
				   7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
					13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
					10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
					3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 ,
				   2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
					14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
					4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
					11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 ,
				   12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
					10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
					9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
					4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 ,
				   4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
					13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
					1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
					6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 ,
				   13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
					1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
					7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
					2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 };

	U64 out1 = perm(per_1, x, 64, 64);

	/*printf("first perm: %016llX\n", out1);*/
	uint32_t rightpt, leftpt;

	leftpt = out1 >> 32;
	rightpt = out1 & 0xFFFFFFFF;
	//printf("left: %08X\n", leftpt);
	//printf("right: %08X\n", rightpt);
	////printf("%08X %08X\n", hi, lo);

	for (int i = 0;i < 16;i++)
	{
		U64 rightexpaned = perm(exp_per, rightpt, 48, 32);
		U64 xoerd = rndky[i] ^ rightexpaned;
		//printf("xoring result %012llX\n", xoerd);
	// Input: x; Output: result;
		U64 result = 0;
		//For i = 0 till 7
	// char box[64];
		for (int i = 0;i < 8;i++)
		{
			const char* box = s + i * 64; //fetch the current S-box
				//box = s + i <<64;
			U64	idx = xoerd >> (7 - i) * 6 & 0x3F;//get the index
			idx = idx >> 1 & 15 | (idx & 1) << 4 | idx & 0x20; //reorder bits
			result |= box[idx] << (7 - i) * 4;

		}
		result = perm(perfn, result, 32, 32);
		leftpt = result ^ leftpt;
		if (i != 15) {
			swap(leftpt, rightpt);

		}
	}
	/*string combine = left + right;*/
	//string combine = leftpt + right;
	U64 combine2 = (uint64_t)leftpt << 32 | rightpt;

	// Final Permutation Table
	char final_perm[64] = { 40, 8, 48, 16, 56, 24, 64, 32,
						   39, 7, 47, 15, 55, 23, 63, 31,
						   38, 6, 46, 14, 54, 22, 62, 30,
						   37, 5, 45, 13, 53, 21, 61, 29,
						   36, 4, 44, 12, 52, 20, 60, 28,
						   35, 3, 43, 11, 51, 19, 59, 27,
						   34, 2, 42, 10, 50, 18, 58, 26,
						   33, 1, 41, 9, 49, 17, 57, 25 };

	// Final Permutation
	/*string cipher = bin2hex(permute(combine, final_perm, 64));*/
	U64 cipher = perm(final_perm, combine2, 64, 64);
	return cipher;


}
int main(int argc, char** argv)
{
	string type;
	//cin >> type;
	if (argc == 4)
	{
		type = argv[1];
		const char* pt = argv[2];
		const char* key = argv[3];
		//const char pt []= "123456ABCD132536";
		//const char pt[] = "7A6C731D22347676";
		//decryption test
		//const char pt[] = "7DB033DD14D6F975";
		//const char pt[] = "C0B7A8D05F3A829C";
		//7A6C731D22347676
		U64 first;
		first = read_u64_hex(pt);
		//cout << first;

		char keychoice1[56] = { 57, 49, 41, 33, 25, 17, 9,
						 1, 58, 50, 42, 34, 26, 18,
						 10, 2, 59, 51, 43, 35, 27,
						 19, 11, 3, 60, 52, 44, 36,
						 63, 55, 47, 39, 31, 23, 15,
						 7, 62, 54, 46, 38, 30, 22,
						 14, 6, 61, 53, 45, 37, 29,
						 21, 13, 5, 28, 20, 12, 4 };
		char keychoice2[48] = { 14, 17, 11, 24, 1, 5,
							 3, 28, 15, 6, 21, 10,
							 23, 19, 12, 4, 26, 8,
							 16, 7, 27, 20, 13, 2,
							 41, 52, 31, 37, 47, 55,
							 30, 40, 51, 45, 33, 48,
							 44, 49, 39, 56, 34, 53,
							 46, 42, 50, 36, 29, 32 };




		//in hna >>>elinput
		/*U64 out1 = 0;
		for (int i = 0;i < 64;++i)
			out1 |= (first >> (64 - per_1[64 - 1 - i]) & 1) << i;*/
			//out1 is plain text after first permutation
		   //U64 out1 = 0;
		   //for (int i = 0;i < 64;++i)
		   //{
		   //	out1 |= (first >> (64 - per_1 [64 - 1 - i]) & 1) << i;
		   //}



		   //const char key [] = "AABB09182736CCDD";
		   //const char key[] = "1323445A6D788381";
		//const char key[] = "AABB09182736CCDD";
		U64 ky;
		ky = read_u64_hex(key);
		U64 kyout = 0;
		for (int i = 0;i < 56;++i)
		{
			kyout |= (ky >> (64 - keychoice1[56 - 1 - i]) & 1) << i;
		}
		//ky = perm(keychoice1, ky, 56, 64);
		/*printf("key after first perm: %014llX\n", kyout);*/
		//key splitiing 
		uint32_t rightky, leftky;

		leftky = kyout >> 28;
		rightky = kyout & 0xFFFFFFF;
		/*printf("left: %07X\n", leftky);
		printf("right: %07X\n", rightky);*/
		unsigned int shift_amount[16] = { 1, 1, 2, 2,
										  2, 2, 2, 2,
										  1, 2, 2, 2,
										  2, 2, 2, 1 };
		// round key vector so we can use them directly at plain text
		//vector is used instead of array as it push in short amount of time 
		vector<U64> rndky;
		/*const char tryt[] = "C3C033A";
		uint32_t x = read_u64_hex(tryt);

		printf("leftshift: %07X\n", x = (x >> 1 | x << 27));*/
		for (int i = 0; i < 16; i++) {
			// Shifting

		//uint32_t leftky2 = leftshift(ky>>28, 1);
		   //leftky = rotl(leftky, 1);
			for (int j = 0;j < shift_amount[i];j++)
			{

				leftky = leftshift(leftky);
				rightky = leftshift(rightky);
			}
			//printf("leftshift: %07X,  rightshift: %07X\n ", leftky,rightky);
			////	printf("right: %07X\n", rightky);
			//	// Combining
			//	//string combine = leftpt + right;
			U64 combine = (uint64_t)leftky << 28 | rightky;

			//U64 data64;
			//data64 = (U64) high << 32 | low;
			// Key Compression
			//U64 roundkey= perm(char per[], U64 in, int opsz, int insz)
			U64 RoundKey = perm(keychoice2, combine, 48, 56);

			rndky.push_back(RoundKey);

		}
		/*for (int i = 0;i < 16;i++)
		{
			cout << i << " " ;
			printf(" %012llX\n", rndky[i]);
		}*/
		//encrypt(first, rndky);

		if (type == "encrypt" || type == "Encrypt")
		{
			//printf("cipher:");
			long long t1 = __rdtsc();
			U64 x = encrypt(first, rndky);
			long long t2 = __rdtsc();

			printf("cipher: %016llX\n", x);
			printf("Cycles: %lld\n", t2 - t1);


		}
		//q= plain;

		if (type == "decrypt" || type == "Decrypt")
		{
		
			 reverse(rndky.begin(), rndky.end());
			// printf("plain:");
			 long long t1 = __rdtsc();
			 U64 v=encrypt(first, rndky);
			long long t2 = __rdtsc();
			printf("plain: %016llX\n", v);
			printf("Cycles: %lld\n", t2 - t1);
		}
	}
	return 0;
}
